# Define the port where the API gateway server would be running
server:
  port: 9000

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 9999
    contextPath: uaa
    
# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that 
# Spring cloud security would need to secure the api gateway before it can route the 
# requests using zuul

zuul:
  routes:
    catalog-service:
      path: /catalog/**
    reviews-service:
      path: /reviews/**
    recommendations-service:
      path: /recommendations/**
    orders-service:
      path: /orders/**

# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: ${vcap.services.eureka.credentials.uri:http://localhost:8761}/eureka/
    
# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token 
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
spring:
  oauth2:
    sso:
      home:
        secure: false
        path: /,/**/*.html
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: acme
      clientSecret: acmesecret
    resource:
      jwt:
        keyUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token_key
      id: openid
      serviceId: ${PREFIX:}resource
# The userInfoUri is used to authenticate the user so that SSO token can be relayed forward. It needs to either be
# a physical endpoint (defined using userInfoUri) OR can be bypassed if you use a JSON web token (JWT) that stores
# information about grants and authentication in the token itself.

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
#    resource: 
#      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
#      preferTokenInfo: false 


---
# Auth-server instance when used on Docker
spring:
  profiles: docker
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://192.168.59.103:8761/eureka/
      
# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: 192.168.59.103
    port: 9999
    contextPath: uaa
    
---
spring:
  profiles: cloud

authserver:
    hostname: http://microservices-authserver-idugalic.cfapps.io
    port: 80
    contextPath: uaa