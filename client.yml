## Info endpoint
info:
  app:
    name: Client Application

server:
  port: 8088
zuul:
  routes:
    api-gateway:
      path: /dashboard/api/**
      
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: ${vcap.services.eureka.credentials.uri:http://localhost:8761}/eureka/

security:
  user:
    password: user
  ignored: /,/favicon.ico,/**/*.html,/js/**,/css/**,/webjars/**
  sessions: ALWAYS
  
# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
  hostname: localhost
  port: 9999
  contextPath: uaa

spring:
  oauth2:
    sso:
      home:
        secure: false
        path: /,/**/*.html
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: acme
      clientSecret: acmesecret


logging:
  level:
    org.springframework.security: DEBUG
    
---

spring:
  profiles: docker
spring: 
  oauth2:
    sso:
      loginPath: /dashboard/login
      logoutPath: /dashboard/logout
    resource:
      jwt:
        keyUri: http://${AUTHSERVER_PORT_8761_TCP_ADDR:192.168.59.103}:9999/uaa/oauth/token_key
      id: openid
      serviceId: ${PREFIX:}resource
    client:
      accessTokenUri: http://${AUTHSERVER_PORT_8761_TCP_ADDR:192.168.59.103}:9999/uaa/oauth/token
      userAuthorizationUri: http://${AUTHSERVER_PORT_8761_TCP_ADDR:192.168.59.103}:9999/uaa/oauth/authorize
      clientId: acme
      clientSecret: acmesecret    

---      
spring:
  profiles: cloud

authserver:
    hostname: http://microservices-authserver-idugalic.cfapps.io
    port: 80
    contextPath: uaa

eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80