## Info endpoint
info:
  app:
    name: Orders management service
    description: Orders  Management Microservice

server:
  port: 8083

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 9999
    contextPath: uaa

spring:
  jpa:
   hibernate:
      ddl-auto: create-drop
  oauth2:
   client:
     accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
     userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
     clientId: acme
     clientSecret: acmesecret
   resource:
      jwt:
        keyUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token_key
      id: openid
      serviceId: ${PREFIX:}resource

eureka:
  client:
    serviceUrl:
      defaultZone: ${vcap.services.eureka.credentials.uri:http://localhost:8761}/eureka/

oauth2:
  resource:
    jwt:
      keyUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token_key
    id: openid
    serviceId: ${PREFIX:}resource
  client:
    tokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
    authorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
    clientId: acme
    clientSecret: acmesecret  

---
# comments-webservice instance when used on Docker
spring:
  profiles: docker
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://192.168.59.103:8761/eureka/
      
# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: 192.168.59.103
    port: 9999
    contextPath: uaa
    
# Define the port where the API gateway server would be running. This could always be port 8080
# since each docker container has it's own IP
#server:
#  port: 8080